// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum userType {
  ADMIN
  TENANT
  LANDLORD
}

model User {
  id         String        @id @default(uuid())
  email      String        @unique
  name       String?
  password   String
  userType   userType      @default(TENANT)
  isActive   Boolean       @default(true)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  properties Property[]
  leases     LeaseTenant[]
}

model Property {
  id          String   @id @default(uuid())
  name        String
  description String?
  address     String
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  landlord    User     @relation(fields: [landlordId], references: [id])
  landlordId  String
  leases      Lease[]
}

model Lease {
  id                  String               @id @default(uuid())
  description         String?
  startDate           DateTime
  endDate             DateTime
  totalRent           Float                @default(0)
  inviteCode          String               @unique
  isDeleted           Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  property            Property             @relation(fields: [propertyId], references: [id])
  propertyId          String
  tenants             LeaseTenant[]
  payments            Payment[]
  announcements       Announcement[]
  leaseTenantInvites  LeaseTenantInvite[]
  maintenanceRequests MaintenanceRequest[]
}

model LeaseTenant {
  id             String    @id @default(uuid())
  individualRent Float     @default(0)
  isDeleted      Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lease          Lease     @relation(fields: [leaseId], references: [id])
  leaseId        String
  tenant         User      @relation(fields: [tenantId], references: [id])
  tenantId       String
  payments       Payment[]
}

model LeaseTenantInvite {
  id         String   @id @default(uuid())
  email      String
  inviteCode String   @unique
  isUsed     Boolean  @default(false)
  isDeleted  Boolean  @default(false)
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  lease      Lease?   @relation(fields: [leaseId], references: [id])
  leaseId    String?
}

model Announcement {
  id        String   @id @default(uuid())
  title     String
  message   String
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lease     Lease?   @relation(fields: [leaseId], references: [id])
  leaseId   String?
}

enum paymentType {
  RENT
  DEPOSIT
  UTILITIES
  OTHER
}

enum recurringInterval {
  NONE
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

model Payment {
  id                String            @id @default(uuid())
  amount            Float
  name              String
  description       String?
  type              paymentType       @default(OTHER)
  paymentDate       DateTime
  recurringInterval recurringInterval @default(NONE)
  isDeleted         Boolean           @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  lease             Lease?            @relation(fields: [leaseId], references: [id])
  leaseId           String?
  leaseTenant       LeaseTenant?      @relation(fields: [leaseTenantId], references: [id])
  leaseTenantId     String?
  reminders         Reminder[]
}

model Reminder {
  id           String         @id @default(uuid())
  daysBefore   Int
  payment      Payment        @relation(fields: [paymentId], references: [id])
  paymentId    String
  ReminderSent ReminderSent[]
}

model ReminderSent {
  id         String   @id @default(uuid())
  sentDate   DateTime
  reminder   Reminder @relation(fields: [reminderId], references: [id])
  reminderId String
}

enum maintenanceRequestStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CANCELLED
  REJECTED
}

model MaintenanceRequest {
  id            String                   @id @default(uuid())
  description   String
  status        maintenanceRequestStatus @default(PENDING)
  requestType   RequestType              @relation(fields: [requestTypeId], references: [id])
  requestTypeId String
  isDeleted     Boolean                  @default(false)
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  lease         Lease                    @relation(fields: [leaseId], references: [id])
  leaseId       String
}

model RequestType {
  id                  String               @id @default(uuid())
  name                String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  maintenanceRequests MaintenanceRequest[]
}
